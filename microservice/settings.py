"""
Django settings for microservice project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from .config import *    # Import everything from config.py

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = SECRET_KEY                            # Secret key for Django security
DEBUG = False
ALLOWED_HOSTS = ['44.205.251.73', 'localhost'] 


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-+c18(67k5y-eu-0$r#1p*-!zz_l62((44^***-0($7la+6e827'

# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# ALLOWED_HOSTS = []


# Application definition
LOG_DIR = BASE_DIR / "logs" # Define the path for the log directory 
LOG_DIR.mkdir(exist_ok=True) # Create the log directory if it doesn't already exist.

# logging setup, detailing how logs are formatted, stored, and what kind of logs are captured for each logger
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime} | {levelname} | {name} | {message}',
            'style': '{',
        },
    },
    'handlers': {
        'task_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOG_DIR / 'task_logs.log',
            'formatter': 'verbose',
        },
        'api_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOG_DIR / 'api_logs.log',
            'formatter': 'verbose',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'celery_tasks': {
            'handlers': ['task_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'api_logger': {
            'handlers': ['api_file'],
            'level': 'INFO',
            'propagate': False,
        },
    }
}

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',               # Django REST framework for building APIs
    'rest_framework.authtoken',     # Enables token-based authentication
    'corsheaders',                  # Handles Cross-Origin Resource Sharing (CORS)
    'drf_yasg',                     # Swagger/OpenAPI documentation for DRF
    'core',                         # Custom app named 'core'
]

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS': {
        'Token': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization',
            'description': 'Token-based authentication. Example: Token <your_token>'
        }
    },
}

REST_FRAMEWORK = {
    # Define authentication classes for the API
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # Use Token Authentication
        'rest_framework.authentication.TokenAuthentication',
    ],
    # Define permission classes for the API
    'DEFAULT_PERMISSION_CLASSES': [
        # Only authenticated users can access the API endpoints
        'rest_framework.permissions.IsAuthenticated',
    ],
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'microservice.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'microservice.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': AWS_DB_NAME,                 # Database name from .env
        'USER': AWS_DB_USER,                 # Database username from .env
        'PASSWORD': AWS_DB_PASSWORD,         # Database password from .env
        'HOST': AWS_DB_HOST,                 # Database host from .env
        'PORT': AWS_DB_PORT,                  # Database port from .env
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = "/home/ec2-user/django-app/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# URL of the message broker (e.g., Redis) used by Celery
CELERY_BROKER_URL = CELERY_BROKER_URL               
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
